import asyncio
import re
import time

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, default_state
from services.googlesheets import get_list_all_rows
from config_data.config import Config, load_config
import database.requests as rq
import keyboards.keyboard_report as kb
from datetime import datetime
import cv2
import logging
import os
import re
import random
router = Router()
config: Config = load_config()


class Report(StatesGroup):
    photo = State()
    QR = State()
    QR_2 = State()
    number_order = State()
    part_designation = State()
    number_MSK = State()
    part_title = State()
    count_part = State()
    count_defect = State()
    reason_defect = State()
    note_report = State()
    find_number_order = State()
    machine_time = State()


async def user_text(tg_id: int):
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
    :param tg_id:
    :return:
    """
    user = await rq.get_user_tg_id(tg_id=tg_id)
    text = f'<b>ID:</b> {user.tg_id}\n' \
           f'<b>–§–ò–û:</b> {user.fullname}\n' \
           f'<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user.job}\n' \
           f'<b>–£—á–∞—Å—Ç–æ–∫:</b> {user.district}\n\n'
    return text


async def report_text(report_id, report_data: list):
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç—á–µ—Ç–µ
    :param report_id:
    :param report_data:
    :return:
    """
    report_info = await rq.get_report(report_id=report_id)
    text = ''
    for data in report_data:
        if data == 'number_order':
            text += f'<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {report_info.number_order}\n'
        if data == 'part_designation':
            text += f'<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:</b> {report_info.part_designation}\n'
        if data == 'number_MSK':
            text += f'<b>–ù–æ–º–µ—Ä –¥–µ—Ç–∞–ª–∏ –ø–æ –ú–°–ö:</b> {report_info.number_MSK}\n'
        if data == 'part_title':
            text += f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:</b> {report_info.part_title}\n'
        if data == 'title_action':
            text += f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b> {report_info.title_action}\n'
        if data == 'description_action':
            text += f'<b>–û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b> {report_info.description_action}\n'
        if data == 'title_machine':
            text += f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞:</b> {report_info.title_machine}\n'
        if data == 'machine_time':
            text += f'<b>–ú–∞—à–∏–Ω–Ω–æ–µ –≤—Ä–µ–º—è:</b> {report_info.machine_time}\n'
        if data == 'average_time':
            text += f'<b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –¥–µ—Ç–∞–ª—å:</b> {report_info.average_time} –º–∏–Ω.\n'
        if data == 'count_part':
            text += f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π:</b> {report_info.count_part}\n'
        if data == 'is_all_installed':
            text += f'<b>–í—Å–µ –ª–∏ –¥–µ—Ç–∞–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:</b> {report_info.is_all_installed}\n'
        if data == 'is_defect':
            text += f'<b>–ï—Å—Ç—å –±—Ä–∞–∫:</b> {report_info.is_defect}\n'
        if data == 'count_defect':
            text += f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–∫–∞:</b> {report_info.count_defect}\n'
        if data == 'reason_defect':
            text += f'<b>–ü—Ä–∏—á–∏–Ω–∞ –±—Ä–∞–∫–∞:</b> {report_info.reason_defect if report_info.reason_defect != "none" else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}\n'
        if data == 'count_machine':
            text += f'<b>–†–∞–±–æ—Ç–∞ –Ω–∞ 1-–º –∏–ª–∏ 2-—Ö —Å—Ç–∞–Ω–∫–∞—Ö:</b> {report_info.count_machine}\n'
        if data == 'data_create':
            text += f'<b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b> {":".join(report_info.data_create.split("/")[:3])}\n'
        if data == 'data_complete':
            text += f'<b>–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b> {":".join(report_info.data_complete.split("/")[:3])}\n'
        if data == 'note_report':
            text += f'<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {report_info.note_report}\n'
    text += '\n'
    return text


@router.message(F.text == '–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç')
async def process_create_part(message: Message, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏, –∑–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    :param message:
    :param state:

    :return:
    """
    logging.info(f"process_create_part {message.chat.id}")

    text_user = await user_text(tg_id=message.chat.id)
    await message.answer(text=f'{text_user}'
                              f'–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ—Ä—Ç–µ–∂–∞ –¥–µ—Ç–∞–ª–∏.'
                              f' –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üìé',
                         reply_markup=kb.keyboard_again_start())
    await state.update_data(photo_1=0)
    await state.set_state(Report.photo)


@router.message(F.photo, StateFilter(Report.photo))
async def process_get_photo(message: Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º QR –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message:
    :param state:
    :return:
    """
    logging.info(f"process_get_photo {message.chat.id}")
    await asyncio.sleep(random.random())
    data = await state.get_data()
    if data['photo_1'] == 0:
        await state.update_data(photo_1=1)
        photo_id = message.photo[-1].file_id
        await state.update_data(photo_id=photo_id)
        text_user = await user_text(tg_id=message.chat.id)
        await message.answer(text=f'{text_user}'
                                  f'–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ QR –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–∫–∞–∑. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è QR –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üìé')
        await state.set_state(Report.QR)

        await state.update_data(photo_2=0)
    else:
        await message.answer(text='–û–∂–∏–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ, –≤ –æ—Ç—á–µ—Ç –≤–∑—è–ª–∏ –ø–µ—Ä–≤–æ–µ')


@router.message(F.photo, StateFilter(Report.QR))
async def process_get_qr(message: Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º QR –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–±—É–µ–º –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ—Å–ª–∏ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
     –¥–∞–Ω–Ω—ã–µ –∏–Ω–∞—á–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é
    :param message:
    :param state:
    :return:
    """
    logging.info(f"process_get_qr {message.chat.id}")
    await asyncio.sleep(random.random())
    data = await state.get_data()
    if data['photo_2'] == 0:
        await state.update_data(photo_2=1)
        qr_id = message.photo[-1].file_id
        file_path = f"data/{qr_id}.jpg"
        await message.bot.download(
            qr_id,
            destination=file_path
        )
        img_qrcode = cv2.imread(file_path)
        detector = cv2.QRCodeDetector()
        data, bbox, clear_qrcode = detector.detectAndDecode(img_qrcode)
        if data:
            data_qr = ''
            list_qr = []
            for _ in data.split("\n"):
                data_qr += f'<b>{_.split(":")[0]}:</b> {_.split(":")[1]}\n'
                list_qr.append(_.split(":")[1])
            await message.answer(text=f'QR —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω\n\n'
                                      f'{data_qr}',
                                 reply_markup=kb.keyboard_confirm_recognize())
            await state.update_data(number_order=list_qr[0])
            await state.update_data(part_designation=list_qr[1])
            await state.update_data(part_title=list_qr[2])
        else:
            await message.answer(text='QR –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É',
                                 reply_markup=kb.keyboard_not_recognize())
        try:
            os.remove(file_path)
            logging.info(f'–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.')
        except FileNotFoundError:
            logging.error(f'–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        except PermissionError:
            logging.error(f'–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {file_path}.')
        except Exception as e:
            logging.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        await state.set_state(state=None)

    else:
        await message.answer(text='–û–∂–∏–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω QR')


@router.callback_query(F.data == 'qr_confirm')
async def confirm_qr(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—à–∏—Ç—ã—Ö –≤ QR
    :param callback: 
    :param state:
    :param bot:
    :return: 
    """
    logging.info(f"confirm_qr {callback.message.chat.id}")
    data = await state.get_data()
    text_user = await user_text(tg_id=callback.message.chat.id)
    await callback.message.edit_text(text=f'{text_user}'
                                          f'<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {data["number_order"]}\n'
                                          f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:</b> {data["part_title"]}\n'
                                          f'<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:</b> {data["part_designation"]}\n\n'
                                          f'–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ú–°–ö')
    await callback.answer()
    await state.set_state(Report.number_MSK)
    # await bot.delete_message(chat_id=callback.message.chat.id,
    #                          message_id=callback.message.message_id)
    # list_title_machine = await get_list_all_rows(data='title_machine')
    # await callback.message.edit_text(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞:',
    #                                  reply_markup=kb.keyboard_select_report(list_report=list_title_machine,
    #                                                                         callback_report='tmachine'))
    # data = await state.get_data()
    # data_dict = {"photo_id": data['photo_id'],
    #              "number_order": data["number_order"],
    #              "part_designation": data["part_designation"],
    #              "part_title": data["part_title"],
    #              "data_create": datetime.today().strftime('%H/%M/%S/%d/%m/%Y'),
    #              "status": rq.ReportStatus.create}
    # report_id = await rq.add_report(data=data_dict)
    # await state.update_data(report_id=report_id)
    # text_user = await user_text(tg_id=callback.message.chat.id)
    # await callback.message.answer(text=f'{text_user}'
    #                                    f'<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {data["number_order"]}\n'
    #                                    f'<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:</b> {data["part_designation"]}\n'
    #                                    f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:</b> {data["part_title"]}\n'
    #                                    f'<b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b> {datetime.today().strftime("%H:%M:%S")}',
    #                               reply_markup=kb.keyboard_report_start())
    # await callback.answer(text='–û—Ç—á–µ—Ç –Ω–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç'
    #                            ' –º–µ–Ω—é "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç" –≤ –º–µ–Ω—é –Ω–∏–∂–µ. –ï—Å–ª–∏ –≤—ã –µ–µ –Ω–µ –≤–∏–¥–∏—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –º–µ–Ω—é –Ω–∞–∂–∞–≤'
    #                            ' –Ω–∞ –∏–∫–æ–Ω–∫—É —Å 4-–º—è –∫—Ä—É–∂–∫–∞–º–∏', show_alert=True)


@router.callback_query(F.data == 'qr_recognize')
async def qr_recognize(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ QR
    :param callback:
    :param state:
    :return:
    """
    logging.info(f"qr_recognize {callback.message.chat.id}")
    text_user = await user_text(tg_id=callback.message.chat.id)
    await callback.message.edit_text(text=f'{text_user}'
                                          f'–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ QR –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–∫–∞–∑.'
                                          f' –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è QR –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üìé')
    await state.set_state(Report.QR)
    await callback.answer()


@router.callback_query(F.data == 'qr_hand_input')
async def qr_hand_input(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –í–≤–æ–¥ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é
    :param callback:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f"qr_hand_input {callback.message.chat.id}")
    text_user = await user_text(tg_id=callback.message.chat.id)
    # await bot.delete_message(chat_id=callback.message.chat.id,
    #                          message_id=callback.message.message_id)
    await callback.message.edit_text(text=f'{text_user} –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞',
                                     reply_markup=None)
    await state.set_state(Report.number_order)
    await callback.answer()


@router.message(F.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def process_main_menu(message: Message, state: FSMContext) -> None:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    :param message:
    :param state:
    :return:
    """
    logging.info(f"process_main_menu {message.chat.id}")
    text_user = await user_text(tg_id=message.chat.id)
    await message.answer(text=f'{text_user}',
                         reply_markup=kb.keyboard_report_start())
    await state.set_state(Report.photo)


@router.message(F.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –∑–∞–Ω–æ–≤–æ üîÑ')
async def process_again_input(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f"process_again_input {message.chat.id}")
    # await bot.delete_message(chat_id=message.chat.id,
    #                          message_id=message.message_id - 1)
    text_user = await user_text(tg_id=message.chat.id)
    await message.answer(text=f'{text_user}'
                              f'–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ—Ä—Ç–µ–∂–∞ –¥–µ—Ç–∞–ª–∏.'
                              f' –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üìé',
                         reply_markup=kb.keyboard_again_start())
    await state.set_state(Report.photo)


@router.message(F.text == '–óa–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –∑a–Ω–æ–≤–æ üîÑ')
async def process_again_input_2(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞
    :param message:
    :param state:
    :return:
    """
    logging.info(f"process_again_input_2 {message.chat.id}")
    # await message.answer(text=f'–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è QR –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üìé',
    #                      reply_markup=kb.keyboard_again_finish())
    # await state.set_state(Report.QR_2)
    await bot.delete_message(chat_id=message.chat.id,
                             message_id=message.message_id-1)
    reports = await rq.get_reports_creator_status(creator=message.chat.id, status=rq.ReportStatus.create)
    list_report = [report for report in reports]
    if not list_report:
        await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ç—á–µ—Ç–æ–≤. —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç –Ω–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç"')
        return

    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è',
                         reply_markup=kb.keyboard_select_report_complete(list_report=list_report,
                                                                         callback_report='comletereport'))


@router.message(F.text, StateFilter(Report.number_order))
async def process_get_number_order(message: Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    :param message:
    :param state:
    :return:
    """
    logging.info(f"process_get_number_order {message.chat.id}")
    await state.update_data(number_order=message.text)
    text_user = await user_text(tg_id=message.chat.id)
    await message.answer(text=f'{text_user}'
                              f'<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {message.text}\n\n'
                              f'–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏')
    await state.set_state(Report.part_title)


@router.message(F.text, StateFilter(Report.part_title))
async def process_get_part_title(message: Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏
    :param message:
    :param state:
    :return:
    """
    logging.info(f"process_get_part_title {message.chat.id}")
    await state.update_data(part_title=message.text)
    data = await state.get_data()
    text_user = await user_text(tg_id=message.chat.id)
    await message.answer(text=f'{text_user}'
                              f'<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {data["number_order"]}\n'
                              f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:</b> {message.text}\n\n'
                              f'–ü—Ä–∏—à–ª–∏—Ç–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏')
    await state.set_state(Report.part_designation)


@router.message(F.text, StateFilter(Report.part_designation))
async def process_get_part_designation(message: Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –∏ –≤—ã–≤–æ–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–∫–∞
    :param message:
    :param state:
    :return:
    """
    logging.info(f"process_get_part_designation {message.chat.id}")
    await state.update_data(part_designation=message.text)
    # data = await state.get_data()
    # data_dict = {"photo_id": data['photo_id'],
    #              "number_order": data["number_order"],
    #              "part_designation": data["part_designation"],
    #              "part_title": data["part_title"],
    #              "data_create": datetime.today().strftime('%H/%M/%S/%d/%m/%Y'),
    #              "status": rq.ReportStatus.create}
    # report_id = await rq.add_report(data=data_dict)
    # time.sleep(0.1)
    # await state.update_data(report_id=report_id)
    # text_user = await user_text(tg_id=message.chat.id)
    # text_report = await report_text(report_id=report_id,
    #                                 report_data=['number_order', 'part_designation', 'part_title', 'data_create'])
    # await message.answer(text=f'{text_user}{text_report}'
    #                           f'–û—Ç—á–µ—Ç –Ω–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç'
    #                           ' –º–µ–Ω—é "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç"',
    #                      reply_markup=kb.keyboard_report_start())
    # await state.set_state(state=None)
    data = await state.get_data()
    text_user = await user_text(tg_id=message.chat.id)
    await message.answer(text=f'{text_user}'
                              f'<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {data["number_order"]}\n'
                              f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:</b> {data["part_title"]}\n'
                              f'<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:</b> {message.text}\n\n'
                              f'–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ú–°–ö')
    await state.set_state(Report.number_MSK)


@router.message(F.text, StateFilter(Report.number_MSK))
async def process_get_number_msk(message: Message, state: FSMContext) -> None:
    """
    +++–ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –¥–µ—Ç–µ–ª–∏ –ø–æ MSK
    :param message:
    :param state:
    :return:
    """
    logging.info(f"process_get_number_MSK {message.chat.id}")
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer(text='–ù–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ú–°–ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ü–∏—Ñ—Ä–∞–º–∏')
        return
    await state.update_data(number_MSK=message.text)
    list_title_action = await get_list_all_rows(data='action')
    data = await state.get_data()
    text_user = await user_text(tg_id=message.chat.id)
    await message.answer(text=f'{text_user}'
                              f'<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {data["number_order"]}\n'
                              f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:</b> {data["part_title"]}\n'
                              f'<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:</b> {data["part_designation"]}\n'
                              f'<b>–ù–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ú–°–ö:</b> {message.text}\n\n'
                              f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:',
                         reply_markup=kb.keyboard_select_report(list_report=list_title_action,
                                                                callback_report='action'))


@router.callback_query(F.data.startswith('action'))
async def process_select_title_action(callback: CallbackQuery, state: FSMContext):
    """
    +++–í—ã–±—Ä–∞—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'process_select_title_action {callback.message.chat.id}')
    title_action = callback.data.split('_')[-1]
    await state.update_data(title_action=title_action)
    data = await state.get_data()
    list_title_machine = await get_list_all_rows(data='title_machine', tittle_action=data["title_action"])
    text_user = await user_text(tg_id=callback.message.chat.id)
    await callback.message.edit_text(text=f'{text_user}'
                                          f'<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {data["number_order"]}\n'
                                          f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:</b> {data["part_title"]}\n'
                                          f'<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:</b> {data["part_designation"]}\n'
                                          f'<b>–ù–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ú–°–ö:</b> {data["number_MSK"]}\n'
                                          f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b> {data["title_action"]}\n'
                                          f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:',
                                  reply_markup=kb.keyboard_select_report(list_report=list_title_machine,
                                                                         callback_report='tmachine'))
    await callback.answer()


# @router.message(F.text, StateFilter(Report.number_MSK))
# async def process_get_number_msk(message: Message, state: FSMContext) -> None:
#     """
#     !!!–ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –¥–µ—Ç–µ–ª–∏ –ø–æ MSK
#     :param message:
#     :param state:
#     :return:
#     """
#     logging.info(f"process_get_number_MSK {message.chat.id}")
#     if not message.text.isdigit() or int(message.text) <= 0:
#         await message.answer(text='–ù–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ú–°–ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ü–∏—Ñ—Ä–∞–º–∏')
#         return
#     await state.update_data(number_MSK=message.text)
#     list_title_machine = await get_list_all_rows(data='title_machine')
#     data = await state.get_data()
#     text_user = await user_text(tg_id=message.chat.id)
#     await message.answer(text=f'{text_user}'
#                               f'<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {data["number_order"]}\n'
#                               f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:</b> {data["part_title"]}\n'
#                               f'<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:</b> {data["part_designation"]}\n'
#                               f'<b>–ù–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ú–°–ö:</b> {message.text}\n\n'
#                               f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:',
#                          reply_markup=kb.keyboard_select_report(list_report=list_title_machine,
#                                                                 callback_report='tmachine'))


# @router.callback_query(F.data.startswith('tmachine'))
# async def process_select_description_operation(callback: CallbackQuery, state: FSMContext, bot: Bot):
#     """
#     !!!–ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞
#     :param callback:
#     :param state:
#     :param bot:
#     :return:
#     """
#     logging.info(f"process_select_description_operation {callback.message.chat.id}")
#     # await bot.delete_message(chat_id=callback.message.chat.id,
#     #                          message_id=callback.message.message_id)
#     title_machine = callback.data.split('_')[-1]
#     await state.update_data(title_machine=title_machine)
#     list_title_action = await get_list_all_rows(data='action')
#     data = await state.get_data()
#     text_user = await user_text(tg_id=callback.message.chat.id)
#     await callback.message.edit_text(text=f'{text_user}'
#                                           f'<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {data["number_order"]}\n'
#                                           f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:</b> {data["part_title"]}\n'
#                                           f'<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:</b> {data["part_designation"]}\n'
#                                           f'<b>–ù–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ú–°–ö:</b> {data["number_MSK"]}\n'
#                                           f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞:</b> {title_machine}\n\n'
#                                           f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:',
#                                      reply_markup=kb.keyboard_select_report(list_report=list_title_action,
#                                                                             callback_report='action'))
#     await callback.answer()


@router.callback_query(F.data.startswith('tmachine'))
async def process_select_title_action(callback: CallbackQuery, state: FSMContext):
    """
    –í—ã–±—Ä–∞—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'process_select_title_action {callback.message.chat.id}')
    title_machine = callback.data.split('_')[-1]
    data = await state.get_data()
    data_dict = {"photo_id": data['photo_id'],
                 "creator": callback.message.chat.id,
                 "number_order": data["number_order"],
                 "part_designation": data["part_designation"],
                 "number_MSK": data["number_MSK"],
                 "part_title": data["part_title"],
                 "data_create": str(datetime.today().strftime('%H:%M:%S %d-%m-%Y')),
                 "title_machine": title_machine,
                 "title_action": data["title_action"],
                 "status": rq.ReportStatus.create}
    report_id = await rq.add_report(data=data_dict)
    time.sleep(0.1)
    await state.update_data(report_id=report_id)
    text_user = await user_text(tg_id=callback.message.chat.id)
    text_report = await report_text(report_id=report_id,
                                    report_data=['number_order',
                                                 'part_designation',
                                                 'number_MSK',
                                                 'part_title',
                                                 'title_machine',
                                                 'title_action',
                                                 'data_create'])
    await callback.message.edit_text(text=f'{text_user}{text_report}'
                                          f'–û—Ç—á–µ—Ç –Ω–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç.',
                                     reply_markup=None)
    await callback.message.answer(text=f'–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç'
                                       f' –º–µ–Ω—é "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç" –≤ –º–µ–Ω—é –Ω–∏–∂–µ. '
                                       f'–ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å 4-–º—è –∫—Ä—É–∂–∫–∞–º–∏',
                                  reply_markup=kb.keyboard_report_start())
    await state.set_state(state=None)
    await callback.answer()


@router.message(F.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç')
async def process_get_complete_part(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    :param message:
    :param state:
    :return:
    """
    logging.info(f"process_get_complete_pert {message.chat.id}")
    await message.answer('–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç',
                         reply_markup=kb.keyboard_again_finish())
    # await bot.delete_message(chat_id=message.chat.id,
    #                          message_id=message.message_id-1)
    reports = await rq.get_reports_creator_status(creator=message.chat.id, status=rq.ReportStatus.create)
    list_report = [report for report in reports]
    if not list_report:
        await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ç—á–µ—Ç–æ–≤. —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç –Ω–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç"')
        return
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è',
                         reply_markup=kb.keyboard_select_report_complete(list_report=list_report,
                                                                         callback_report='comletereport'))
#     await message.answer(text=f'–ü—Ä–∏—à–ª–∏—Ç–µ QR-–∫–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ . –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è QR –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üìé',
#                          reply_markup=kb.keyboard_again_finish())
#     await state.set_state(Report.QR_2)
#
#
# @router.message(F.photo, StateFilter(Report.QR_2))
# async def process_get_qr(message: Message, state: FSMContext) -> None:
#     """
#     –ü–æ–ª—É—á–∞–µ–º QR –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     :param message:
#     :param state:
#     :return:
#     """
#     logging.info(f"process_start_command {message.chat.id}")
#     qr_id = message.photo[-1].file_id
#     file_path = f"data/{qr_id}.jpg"
#     await message.bot.download(
#         qr_id,
#         destination=file_path
#     )
#     img_qrcode = cv2.imread(file_path)
#     detector = cv2.QRCodeDetector()
#     data, bbox, clear_qrcode = detector.detectAndDecode(img_qrcode)
#     if data:
#         list_qr = []
#         for _ in data.split("\n"):
#             list_qr.append(_.split(":")[1])
#         await state.update_data(report_id=' ')
#         report = await rq.get_report_number(number=list_qr[0])
#         if not report:
#             await message.answer(text=f"–û—Ç–∫—Ä—ã—Ç—ã–π –æ—Ç—á–µ—Ç —Å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ {list_qr[0]} –Ω–µ –Ω–∞–π–¥–µ–Ω."
#                                       f" –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç—á–µ—Ç —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞ –≤—Ä—É—á–Ω—É—é",
#                                  reply_markup=kb.keyboard_not_report())
#             return
#         list_reports = [report.part_title for report in (await rq.get_reports_number(number=list_qr[0]))]
#         print(list_reports)
#         # elif report.status == rq.ReportStatus.complied:
#         #     await message.answer(text=f"–û—Ç—á–µ—Ç —Å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ {list_qr[0]} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.",
#         #                          reply_markup=kb.keyboard_not_report())
#         #     return
#         await state.update_data(report_id=report.id)
#         try:
#             os.remove(file_path)
#             logging.info(f'–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.')
#         except FileNotFoundError:
#             logging.error(f'–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
#         except PermissionError:
#             logging.error(f'–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {file_path}.')
#         except Exception as e:
#             logging.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
#
#     else:
#         await message.answer(text='QR –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω',
#                              reply_markup=kb.keyboard_not_recognize_finish())
#         try:
#             os.remove(file_path)
#             logging.info(f'–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.')
#         except FileNotFoundError:
#             logging.error(f'–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
#         except PermissionError:
#             logging.error(f'–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {file_path}.')
#         except Exception as e:
#             logging.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
#         return


@router.callback_query(F.data.startswith('comletereport'))
async def process_select_report(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∑–∞–≤–µ—Ä–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π
    :param callback:
    :param state:
    :return:
    """
    logging.info(f"process_select_report {callback.message.chat.id}")
    report_id = int(callback.data.split('_')[-1])
    # list_title_action = await get_list_all_rows(data='action')
    await state.update_data(report_id=report_id)
    data_complete = datetime.today().strftime('%H:%M:%S %d-%m-%Y')
    await rq.set_report(report_id=report_id,
                        data={"data_complete": data_complete})

    time.sleep(0.1)
    # text_user = await user_text(tg_id=callback.message.chat.id)
    # text_report = await report_text(report_id=report_id,
    #                                 report_data=['number_order',
    #                                              'part_designation',
    #                                              'part_title',
    #                                              'title_machine',
    #                                              'data_create',
    #                                              'data_complete'])
    # await callback.message.edit_text(text=f'{text_user}{text_report}'
    #                                       f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:',
    #                                  reply_markup=kb.keyboard_select_report(list_report=list_title_action,
    #                                                                         callback_report='action'))


# @router.callback_query(F.data == 'open_report')
# async def process_open_report(callback: CallbackQuery, state: FSMContext, bot: Bot):
#     logging.info(f"process_open_report {callback.message.chat.id}")
#     text_user = await user_text(tg_id=callback.message.chat.id)
#     await bot.delete_message(chat_id=callback.message.chat.id,
#                              message_id=callback.message.message_id)
#     await callback.message.answer(text=f'{text_user}'
#                                        f'–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.'
#                                        f' –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üìé',
#                                   reply_markup=kb.keyboard_again_start())
#     await state.set_state(Report.photo)


# @router.callback_query(F.data == 'input_number_report')
# async def process_input_number_report(callback: CallbackQuery, state: FSMContext, bot: Bot):
#     logging.info(f"process_input_number_report {callback.message.chat.id}")
#     await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞',
#                                      reply_markup=None)
#     await state.set_state(Report.find_number_order)
#     await callback.answer()


# @router.callback_query(F.data == 'qr_recognize_finish')
# async def process_qr_recognize_finish(callback: CallbackQuery, state: FSMContext, bot: Bot):
#     logging.info(f"process_qr_recognize_finish {callback.message.chat.id}")
#     await callback.message.answer(text=f'–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è QR –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üìé',
#                                   reply_markup=kb.keyboard_report_start())
#     await state.set_state(Report.QR_2)


# @router.message(F.text, StateFilter(Report.find_number_order))
# async def get_input_number_report(message: Message, state: FSMContext):
#     logging.info(f"get_input_number_report {message.chat.id}")
#     report = await rq.get_report_number(number=message.text)
#     if not report:
#         await message.answer(text=f"–û—Ç–∫—Ä—ã—Ç—ã–π –æ—Ç—á–µ—Ç —Å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω."
#                                   f" –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç—á–µ—Ç —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞ –≤—Ä—É—á–Ω—É—é",
#                              reply_markup=kb.keyboard_not_report())
#         return
#     list_reports = [report.part_designation for report in (await rq.get_reports_number(number=message.text))]
#     await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
#                          reply_markup=kb.keyboard_select_report(list_report=list_reports, callback_report='report'))
#     await state.set_state(state=None)

#
# @router.callback_query(F.data.startswith('report'))
# async def process_select_report(callback: CallbackQuery, state: FSMContext):
#     """
#     –í—ã–±–æ—Ä –æ—Ç—á–µ—Ç–∞ –¥–ª—è –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
#     :param callback:
#     :param state:
#     :return:
#     """
#     logging.info(f"process_select_report")
#     designation_part = callback.data.split('_')[-1]
#     report = await rq.get_report_designation_part(designation_part=designation_part)
#
#     list_title_action = await get_list_all_rows(data='action')
#     report_id = report.id
#     await state.update_data(report_id=report_id)
#     data_complete = datetime.today().strftime('%H/%M/%S/%d/%m/%Y')
#     await rq.set_report(report_id=report_id,
#                         data={"data_complete": data_complete})
#
#     time.sleep(0.1)
#     text_user = await user_text(tg_id=callback.message.chat.id)
#     text_report = await report_text(report_id=report_id,
#                                     report_data=['number_order',
#                                                  'part_designation',
#                                                  'part_title',
#                                                  'data_create',
#                                                  'data_complete'])
#     await callback.message.edit_text(text=f'{text_user}{text_report}'
#                                           f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:',
#                                      reply_markup=kb.keyboard_select_report(list_report=list_title_action,
#                                                                             callback_report='action'))
#     await callback.answer()


# @router.callback_query(F.data.startswith('action'))
# async def process_select_title_action(callback: CallbackQuery, state: FSMContext):
#     """
#     –í—ã–±—Ä–∞—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
#     :param callback:
#     :param state:
#     :return:
#     """
#     logging.info(f'process_select_title_action {callback.message.chat.id}')
#     list_operation = await get_list_all_rows(data='operation')
#     data = await state.get_data()
#     report_id = data['report_id']
#     await rq.set_report(report_id=report_id,
#                         data={"title_action": callback.data.split('_')[1]})
#     time.sleep(0.1)
    list_operation = await get_list_all_rows(data='operation')
    text_user = await user_text(tg_id=callback.message.chat.id)
    text_report = await report_text(report_id=report_id,
                                    report_data=['number_order',
                                                 'part_designation',
                                                 'number_MSK',
                                                 'title_action',
                                                 'part_title',
                                                 'title_machine',
                                                 'data_create',
                                                 'data_complete'])
    # await callback.message.edit_text(text=f'{text_user}{text_report}'
    #                                       f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:',
    #                                  reply_markup=kb.keyboard_select_report(list_report=list_operation,
    #                                                                         callback_report='operation'))
    await callback.message.edit_text(text=f'{text_user}{text_report}'
                                          f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:',
                                     reply_markup=kb.keyboard_operation())

    await callback.answer()


@router.callback_query(F.data.startswith('operation'))
async def process_select_description_operation(callback: CallbackQuery, state: FSMContext):
    """
    –í—ã–±–æ—Ä –æ–ø–∏—Å–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
    :param callback:
    :param state:
    :return:
    """
    logging.info(f"process_select_description_operation {callback.message.chat.id}")
    # list_title_machine = await get_list_all_rows(data='title_machine')
    data = await state.get_data()
    report_id = data['report_id']
    await rq.set_report(report_id=report_id,
                        data={"description_action": callback.data.split('_')[1]})
    #
    # time.sleep(0.1)
    # text_user = await user_text(tg_id=callback.message.chat.id)
    # text_report = await report_text(report_id=report_id,
    #                                 report_data=['number_order',
    #                                              'part_designation',
    #                                              'title_action',
    #                                              'part_title',
    #                                              'description_action',
    #                                              'title_machine',
    #                                              'data_create',
    #                                              'data_complete'])
    # await callback.message.edit_text(text=f'{text_user}{text_report}'
    #                                       f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞:',
    #                                  reply_markup=kb.keyboard_select_report(list_report=list_title_machine,
    #                                                                         callback_report='tmachine'))
    # await callback.answer()
#
#
# @router.callback_query(F.data.startswith('tmachine'))
# async def process_select_description_operation(callback: CallbackQuery, state: FSMContext):
#     """
#     –í—ã–±–æ—Ä –æ–ø–∏—Å–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
#     :param callback:
#     :param state:
#     :return:
#     """
#     text_user = await user_text(tg_id=callback.message.chat.id)
#     data = await state.get_data()
#     report_id = data['report_id']
#     await rq.set_report(report_id=report_id,
#                         data={"title_machine": callback.data.split('_')[1]})
#     report_info = await rq.get_report(report_id=report_id)
#     date_format = '%H/%M/%S/%d/%m/%Y'
#     machine_time = datetime.strptime(report_info.data_complete,
#                                      date_format) - datetime.strptime(report_info.data_create, date_format)
#     await rq.set_report(report_id=report_id,
#                         data={"machine_time": machine_time.seconds})
#
#     time.sleep(0.1)
    text_user = await user_text(tg_id=callback.message.chat.id)
    text_report = await report_text(report_id=report_id,
                                    report_data=['number_order',
                                                 'part_designation',
                                                 'number_MSK',
                                                 'title_action',
                                                 'part_title',
                                                 'description_action',
                                                 'title_machine',
                                                 'data_create',
                                                 'data_complete'])
    await callback.message.edit_text(text=f'{text_user}{text_report}'
                                          f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—é')
    await callback.answer()
    await state.set_state(Report.count_part)


@router.message(F.text, StateFilter(Report.count_part))
async def process_get_count_part(message: Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
    :param message:
    :param state:
    :return:
    """
    logging.info(f'process_get_count_part {message.chat.id}')
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer(text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ü–∏—Ñ—Ä–∞–º–∏')
        return
    # !!! –ó–¥–µ—Å—å —Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è

    data = await state.get_data()
    report_id = data['report_id']
    report_info = await rq.get_report(report_id=report_id)
    date_format = '%H:%M:%S %d-%m-%Y'
    average_time = (datetime.strptime(report_info.data_complete,
                                     date_format) - datetime.strptime(report_info.data_create,
                                                                      date_format))

    await rq.set_report(report_id=report_id,
                        data={"average_time": round(average_time.seconds/60/int(message.text), 2)})

    time.sleep(0.1)
    await rq.set_report(report_id=report_id,
                        data={"count_part": message.text})
    await state.set_state(state=None)
    time.sleep(0.1)
    text_user = await user_text(tg_id=message.chat.id)
    text_report = await report_text(report_id=report_id,
                                    report_data=['number_order',
                                                 'part_designation',
                                                 'number_MSK',
                                                 'title_action',
                                                 'part_title',
                                                 'description_action',
                                                 'title_machine',
                                                 'average_time',
                                                 'count_part',
                                                 'data_create',
                                                 'data_complete'])
    await message.answer(text=f'{text_user}{text_report}'
                              f'–í—Å–µ –ª–∏ –¥–µ—Ç–∞–ª–∏ –∏–∑ –ø–∞—Ä—Ç–∏–∏ –ø—Ä–æ—à–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—é',
                         reply_markup=kb.keyboard_is_all_installed())


@router.callback_query(F.data.startswith('is_all_installed'))
async def is_all_installed(callback: CallbackQuery, state: FSMContext):
    """
    –í—Å–µ –ª–∏ –¥–µ—Ç–∞–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'is_all_installed {callback.message.chat.id}')
    answer = callback.data.split('_')[-1]
    data = await state.get_data()
    report_id = data['report_id']
    if answer == 'yes':
        await rq.set_report(report_id=report_id,
                            data={"is_all_installed": '–î–∞'})
    else:
        await rq.set_report(report_id=report_id,
                            data={"is_all_installed": '–ù–µ—Ç'})
    text_user = await user_text(tg_id=callback.message.chat.id)
    text_report = await report_text(report_id=report_id,
                                    report_data=['number_order',
                                                 'part_designation',
                                                 'number_MSK',
                                                 'title_action',
                                                 'part_title',
                                                 'description_action',
                                                 'title_machine',
                                                 'average_time',
                                                 'count_part',
                                                 'is_all_installed',
                                                 'data_create',
                                                 'data_complete'])
    await callback.message.edit_text(text=f'{text_user}{text_report}'
                                          f'–ï—Å—Ç—å –ª–∏ –±—Ä–∞–∫?',
                                     reply_markup=kb.keyboard_is_defect())
    await callback.answer()


@router.callback_query(F.data.startswith('is_defect'))
async def is_defect(callback: CallbackQuery, state: FSMContext):
    """
    –í—Å–µ –ª–∏ –¥–µ—Ç–∞–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'is_defect {callback.message.chat.id}')
    answer = callback.data.split('_')[-1]
    data = await state.get_data()
    report_id = data['report_id']
    if answer == 'yes':
        await rq.set_report(report_id=report_id,
                            data={"is_defect": '–î–∞'})
    else:
        # await callback.answer(text='‚ö†Ô∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ‚ö†Ô∏è\n\n'
        #                            '–ï—Å–ª–∏ –Ω–µ—Ç –±—Ä–∞–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–Ω–∫—Ç—ã —Å –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏ –ø—Ä–∏—á–∏–Ω–æ–π,'
        #                            ' –∏—Ö –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç—á–µ—Ç–∞', show_alert=True)
        await rq.set_report(report_id=report_id,
                            data={"is_defect": '–ù–µ—Ç'})
        await rq.set_report(report_id=report_id,
                            data={"count_defect": "0"})
        await rq.set_report(report_id=report_id,
                            data={"reason_defect": "none"})
        text_user = await user_text(tg_id=callback.message.chat.id)
        text_report = await report_text(report_id=report_id,
                                        report_data=['number_order',
                                                     'part_designation',
                                                     'number_MSK',
                                                     'title_action',
                                                     'part_title',
                                                     'description_action',
                                                     'title_machine',
                                                     'average_time',
                                                     'count_part',
                                                     'is_all_installed',
                                                     'is_defect',
                                                     'data_create',
                                                     'data_complete'])
        await callback.message.edit_text(text=f'{text_user}{text_report}'
                                              f'–†–∞–±–æ—Ç–∞ –Ω–∞ 1 –∏–ª–∏ 2-—Ö —Å—Ç–∞–Ω–∫–∞—Ö?',
                                         reply_markup=kb.keyboard_count_machine())
        await callback.answer()
        return
    text_user = await user_text(tg_id=callback.message.chat.id)
    text_report = await report_text(report_id=report_id,
                                    report_data=['number_order',
                                                 'part_designation',
                                                 'number_MSK',
                                                 'title_action',
                                                 'part_title',
                                                 'description_action',
                                                 'title_machine',
                                                 'average_time',
                                                 'count_part',
                                                 'is_all_installed',
                                                 'is_defect',
                                                 'data_create',
                                                 'data_complete'])
    await callback.message.edit_text(text=f'{text_user}{text_report}'
                                          f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–∫–∞?')
    await state.set_state(Report.count_defect)
    await callback.answer()


@router.message(StateFilter(Report.count_defect))
async def get_count_defect(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π —Å –¥–µ—Ñ–µ–∫—Ç–∞–º–∏
    :param message:
    :param state:
    :return:
    """
    logging.info(f'get_count_defect {message.chat.id}')
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer(text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ü–∏—Ñ—Ä–∞–º–∏')
        return
    data = await state.get_data()
    report_id = data['report_id']
    info_report = await rq.get_report(report_id=report_id)
    if int(info_report.count_part) < int(message.text):
        await message.answer(text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π –±—Ä–∞–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π.'
                                  ' –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥')
        return
    await rq.set_report(report_id=report_id,
                        data={"count_defect": message.text})
    text_user = await user_text(tg_id=message.chat.id)
    text_report = await report_text(report_id=report_id,
                                    report_data=['number_order',
                                                 'part_designation',
                                                 'number_MSK',
                                                 'title_action',
                                                 'part_title',
                                                 'description_action',
                                                 'title_machine',
                                                 'average_time',
                                                 'count_part',
                                                 'is_all_installed',
                                                 'is_defect',
                                                 'count_defect',
                                                 'data_create',
                                                 'data_complete'])
    if int(message.text) > 0:
        await message.answer(text=f'{text_user}{text_report}'
                                  f'–ü—Ä–∏—á–∏–Ω–∞ –±—Ä–∞–∫–∞?')
        await state.set_state(Report.reason_defect)
    else:
        await message.answer(text=f'{text_user}{text_report}'
                                  f'–†–∞–±–æ—Ç–∞ –Ω–∞ 1 –∏–ª–∏ 2-—Ö —Å—Ç–∞–Ω–∫–∞—Ö?',
                             reply_markup=kb.keyboard_count_machine())


@router.message(StateFilter(Report.reason_defect))
async def get_reason_defect(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –¥–µ—Ñ–µ–∫—Ç–∞
    :param message:
    :param state:
    :return:
    """
    logging.info(f'get_reason_defect {message.chat.id}')
    data = await state.get_data()
    report_id = data['report_id']
    await rq.set_report(report_id=report_id,
                        data={"reason_defect": message.text})
    text_user = await user_text(tg_id=message.chat.id)
    text_report = await report_text(report_id=report_id,
                                    report_data=['number_order',
                                                 'part_designation',
                                                 'number_MSK',
                                                 'title_action',
                                                 'part_title',
                                                 'description_action',
                                                 'title_machine',
                                                 'average_time',
                                                 'count_part',
                                                 'is_all_installed',
                                                 'is_defect',
                                                 'count_defect',
                                                 'reason_defect',
                                                 'data_create',
                                                 'data_complete'])
    await message.answer(text=f'{text_user}{text_report}'
                              f'–†–∞–±–æ—Ç–∞ –Ω–∞ 1 –∏–ª–∏ 2-—Ö —Å—Ç–∞–Ω–∫–∞—Ö?',
                         reply_markup=kb.keyboard_count_machine())
    await state.set_state(state=None)


@router.callback_query(F.data.startswith('count_machine'))
async def count_machine(callback: CallbackQuery, state: FSMContext):
    """
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–∫–æ–≤
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'count_machine {callback.message.chat.id}')
    answer = callback.data.split('_')[-1]
    data = await state.get_data()
    report_id = data['report_id']
    await rq.set_report(report_id=report_id,
                        data={"count_machine": answer})
    text_user = await user_text(tg_id=callback.message.chat.id)
    text_report = await report_text(report_id=report_id,
                                    report_data=['number_order',
                                                 'part_designation',
                                                 'number_MSK',
                                                 'title_action',
                                                 'part_title',
                                                 'description_action',
                                                 'title_machine',
                                                 'average_time',
                                                 'count_part',
                                                 'is_all_installed',
                                                 'is_defect',
                                                 'count_defect',
                                                 'reason_defect',
                                                 'count_machine',
                                                 'data_create',
                                                 'data_complete'])
    await callback.message.edit_text(text=f'{text_user}{text_report}'
                                          f'–£–∫–∞–∂–∏—Ç–µ –º–∞—à–∏–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö'
                                          f' (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.83)')
    await state.set_state(Report.machine_time)
    await callback.answer()


@router.message(StateFilter(Report.machine_time))
async def get_time_machine(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ–º –º–∞—à–∏–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –ø—Ä–æ—Å–∏–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
    :param message:
    :param state:
    :return:
    """
    logging.info(f'get_time_machine {message.chat.id}')
    re_int = re.compile(r"(^[1-9]+\d*$|^0$)")
    re_float = re.compile(r"(^\d+\.\d+$|^\.\d+$)")
    if not message.text.isdigit():
        if not re_int.match(message.text) and not re_float.match(message.text):
            await message.answer(text='–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º')
            return
    time_machine = message.text
    data = await state.get_data()
    report_id = data['report_id']
    await rq.set_report(report_id=report_id,
                        data={"machine_time": time_machine})
    text_user = await user_text(tg_id=message.chat.id)
    text_report = await report_text(report_id=report_id,
                                    report_data=['number_order',
                                                 'part_designation',
                                                 'number_MSK',
                                                 'title_action',
                                                 'part_title',
                                                 'description_action',
                                                 'title_machine',
                                                 'average_time',
                                                 'count_part',
                                                 'is_all_installed',
                                                 'is_defect',
                                                 'count_defect',
                                                 'reason_defect',
                                                 'count_machine',
                                                 'machine_time',
                                                 'data_create',
                                                 'data_complete'])

    await message.answer(text=f'{text_user}{text_report}'
                              f'–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ',
                         reply_markup=kb.keyboard_skip())
    await state.set_state(Report.note_report)


# @router.callback_query(F.data == 'skip')
# async def skip_note_report(callback: CallbackQuery, state: FSMContext):
#     """
#     –ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
#     :param callback:
#     :param state:
#     :return:
#     """
#     logging.info(f"skip_note_report {callback.message.chat.id}")
#     data = await state.get_data()
#     report_id = data['report_id']
#     await rq.set_report(report_id=report_id,
#                         data={"note_report": 'None'})
#     await state.set_state(state=None)
#     text_user = await user_text(tg_id=callback.message.chat.id)
#     text_report = await report_text(report_id=report_id,
#                                     report_data=['number_order',
#                                                  'part_designation',
#                                                  'title_action',
#                                                  'part_title',
#                                                  'description_action',
#                                                  'title_machine',
#                                                  'average_time',
#                                                  'count_part',
#                                                  'is_all_installed',
#                                                  'is_defect',
#                                                  'count_defect',
#                                                  'reason_defect',
#                                                  'note_report',
#                                                  'data_create',
#                                                  'data_complete'])
#     await callback.message.answer(text=f'–û—Ç—á–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω\n\n'
#                                        f'{text_user}{text_report}\n\n'
#                                        f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –∏–∑–º–µ–Ω–∏—Ç–µ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ',
#                                   reply_markup=kb.keyboard_check_report())
#     await callback.answer()


# @router.message(StateFilter(Report.note_report))
# async def get_note_report(message: Message, state: FSMContext):
#     """
#     –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
#     :param message:
#     :param state:
#     :return:
#     """
#     logging.info(f'get_note_report {message.chat.id}')
#     data = await state.get_data()
#     report_id = data['report_id']
#     await rq.set_report(report_id=report_id,
#                         data={"note_report": message.text})
#     await state.set_state(state=None)
#     text_user = await user_text(tg_id=message.chat.id)
#     text_report = await report_text(report_id=report_id,
#                                     report_data=['number_order',
#                                                  'part_designation',
#                                                  'title_action',
#                                                  'part_title',
#                                                  'description_action',
#                                                  'title_machine',
#                                                  'average_time',
#                                                  'count_part',
#                                                  'is_all_installed',
#                                                  'is_defect',
#                                                  'count_defect',
#                                                  'reason_defect',
#                                                  'note_report',
#                                                  'data_create',
#                                                  'data_complete'])
#     await message.answer(text=f'–û—Ç—á–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω\n\n'
#                               f'{text_user}{text_report}\n\n'
#                               f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –∏–∑–º–µ–Ω–∏—Ç–µ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ',
#                          reply_markup=kb.keyboard_check_report())


@router.message(StateFilter(Report.note_report))
async def get_note_report(message: Message, state: FSMContext, bot: Bot):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'get_note_report {message.chat.id}')
    await message.answer(text='–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á–µ—Ç–∞',
                         reply_markup=kb.keyboard_confirm_report())
    data = await state.get_data()
    report_id = data['report_id']
    await rq.set_report(report_id=report_id,
                        data={"note_report": message.text})
    await state.set_state(state=None)
    data = await state.get_data()
    report_id = data['report_id']
    report_info = await rq.get_report(report_id=report_id)
    text_user = await user_text(tg_id=message.chat.id)
    text_report = await report_text(report_id=report_id,
                                    report_data=['number_order',
                                                 'part_designation',
                                                 'number_MSK',
                                                 'title_action',
                                                 'part_title',
                                                 'description_action',
                                                 'title_machine',
                                                 'average_time',
                                                 'count_part',
                                                 'is_all_installed',
                                                 'is_defect',
                                                 'count_defect',
                                                 'reason_defect',
                                                 'note_report',
                                                 'machine_time',
                                                 'data_create',
                                                 'data_complete'])
    check_message = await message.answer_photo(photo=report_info.photo_id,
                                               caption=f'{text_user}{text_report}',
                                               reply_markup=kb.keyboard_change_report(info_report=report_info))
    await state.set_state(state=None)
    await state.update_data(check_message=check_message.message_id)


@router.callback_query(F.data == 'skip')
async def check_report(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—á–µ—Ç
    :param callback:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'check_report {callback.message.chat.id}')
    await callback.message.answer(text='–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á–µ—Ç–∞',
                                  reply_markup=kb.keyboard_confirm_report())
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    data = await state.get_data()
    report_id = data['report_id']
    report_info = await rq.get_report(report_id=report_id)
    text_user = await user_text(tg_id=callback.message.chat.id)
    text_report = await report_text(report_id=report_id,
                                    report_data=['number_order',
                                                 'part_designation',
                                                 'number_MSK',
                                                 'title_action',
                                                 'part_title',
                                                 'description_action',
                                                 'title_machine',
                                                 'average_time',
                                                 'count_part',
                                                 'is_all_installed',
                                                 'is_defect',
                                                 'count_defect',
                                                 'reason_defect',
                                                 'note_report',
                                                 'machine_time',
                                                 'data_create',
                                                 'data_complete'])
    check_message = await callback.message.answer_photo(photo=report_info.photo_id,
                                                        caption=f'{text_user}{text_report}',
                                                        reply_markup=kb.keyboard_change_report(info_report=report_info))
    await state.update_data(check_message=check_message.message_id)
    await state.set_state(state=None)
    await callback.answer()
